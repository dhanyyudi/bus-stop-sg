name: Bus Stop Regular Monitor

on:
  schedule:
    - cron: "0 1 * * 1" # Every Monday at 1 AM UTC
  workflow_dispatch:
    inputs:
      limit:
        description: "Test limit (optional)"
        required: false
        default: ""
      workers:
        description: "Number of workers"
        required: false
        default: "4"
      log_level:
        description: "Log level (INFO, DEBUG)"
        required: false
        default: "INFO"

jobs:
  collect-and-notify:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    permissions:
      contents: write
    steps:
      - name: Send start notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"🔄 Bus Stop Collection Started"}' \
              "$SLACK_WEBHOOK"
          else
            echo "WARNING: SLACK_WEBHOOK not configured"
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
          pip install selenium beautifulsoup4 pandas tqdm webdriver-manager requests numpy

      - name: Set environment encoding
        run: |
          echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
          echo "LC_ALL=C.UTF-8" >> $GITHUB_ENV
          echo "LANG=C.UTF-8" >> $GITHUB_ENV

      - name: Run fixed data collection
        env:
          LTA_API_KEY: ${{ secrets.LTA_API_KEY }}
          PYTHONIOENCODING: utf-8
        run: |
          echo "Starting bus stop data collection..."
          echo "Using script: bus_stop_merger_final.py"

          python bus_stop_merger_final.py \
            --lta-api-key "$LTA_API_KEY" \
            --workers ${{ github.event.inputs.workers || '4' }} \
            --batch-size 20 \
            --log-level ${{ github.event.inputs.log_level || 'INFO' }} \
            ${{ github.event.inputs.limit && format('--limit {0}', github.event.inputs.limit) || '' }}

          echo "Data collection completed!"

      - name: Extract statistics safely
        run: |
          echo "Extracting statistics with error handling..."
          python3 << 'EOF'
          import pandas as pd
          import os
          import glob
          import json

          # Initialize default values
          stats = {
              'TOTAL_STOPS': 0,
              'CORRECTIONS': 0,
              'SUCCESS_RATE': 100.0,
              'CORRECTION_PCT': 0.0,
              'CHANGES_DETECTED': 0,
              'NEW_STOPS': 0,
              'NAME_CHANGES': 0,
              'REMOVED_STOPS': 0,
              'EFFICIENCY': 100.0
          }

          try:
              # Load main result file
              if os.path.exists('data/lta_correction.csv'):
                  df = pd.read_csv('data/lta_correction.csv')
                  stats['TOTAL_STOPS'] = len(df)
                  
                  if 'name_source' in df.columns:
                      stats['CORRECTIONS'] = len(df[df['name_source'] == 'SimplyGo'])
                      stats['CORRECTION_PCT'] = (stats['CORRECTIONS'] / stats['TOTAL_STOPS'] * 100) if stats['TOTAL_STOPS'] > 0 else 0
                  
                  print(f"✅ Loaded main results: {stats['TOTAL_STOPS']} stops, {stats['CORRECTIONS']} corrections")
              
              # Try to get change statistics
              change_files = glob.glob('data/LTA_changes_*.csv')
              if change_files:
                  latest_change_file = sorted(change_files)[-1]
                  print(f"📊 Loading changes from: {latest_change_file}")
                  
                  changes_df = pd.read_csv(latest_change_file)
                  stats['CHANGES_DETECTED'] = len(changes_df)
                  
                  if 'change_type' in changes_df.columns:
                      stats['NEW_STOPS'] = len(changes_df[changes_df['change_type'] == 'new'])
                      stats['NAME_CHANGES'] = len(changes_df[changes_df['change_type'] == 'name_changed'])
                      stats['REMOVED_STOPS'] = len(changes_df[changes_df['change_type'] == 'removed'])
                  
                  print(f"📈 Changes: {stats['CHANGES_DETECTED']} total ({stats['NEW_STOPS']} new, {stats['NAME_CHANGES']} renamed, {stats['REMOVED_STOPS']} removed)")
              
              # Calculate efficiency
              if stats['CHANGES_DETECTED'] > 0 and stats['TOTAL_STOPS'] > 0:
                  stats['EFFICIENCY'] = ((stats['TOTAL_STOPS'] - stats['CHANGES_DETECTED']) / stats['TOTAL_STOPS'] * 100)
              
              print("📊 Final Statistics:")
              for key, value in stats.items():
                  print(f"   {key}: {value}")
              
          except Exception as e:
              print(f"❌ Error extracting stats: {e}")
              # Keep default values

          # Write to environment file
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              for key, value in stats.items():
                  f.write(f"{key}={value}\n")

          print("✅ Statistics extraction completed")
          EOF

      - name: Check for significant changes
        run: |
          echo "Checking for significant changes..."

          SIGNIFICANT_CHANGE=false

          if [ "${CHANGES_DETECTED:-0}" -gt 50 ]; then
            echo "SIGNIFICANT: Large number of changes detected ($CHANGES_DETECTED)"
            SIGNIFICANT_CHANGE=true
          fi

          if [ "${NEW_STOPS:-0}" -gt 20 ]; then
            echo "SIGNIFICANT: Many new bus stops ($NEW_STOPS)"
            SIGNIFICANT_CHANGE=true
          fi

          if [ "${REMOVED_STOPS:-0}" -gt 20 ]; then
            echo "SIGNIFICANT: Many removed bus stops ($REMOVED_STOPS)"
            SIGNIFICANT_CHANGE=true
          fi

          echo "SIGNIFICANT_CHANGE=$SIGNIFICANT_CHANGE" >> $GITHUB_ENV

      - name: Commit results
        run: |
          echo "Committing results to repository..."
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          TIMESTAMP=$(date +'%d%m%Y_%H%M')

          # Add files if they exist
          [ -f "data/lta_correction.csv" ] && git add "data/lta_correction.csv"

          # Add other data files
          for file in data/*.csv logs/*.log output/*.csv; do
            [ -f "$file" ] && git add "$file"
          done

          # Create comprehensive commit message
          COMMIT_MSG="Bus data update ${TIMESTAMP}: ${TOTAL_STOPS:-0} stops"

          if [ "${CHANGES_DETECTED:-0}" -gt 0 ]; then
            COMMIT_MSG="$COMMIT_MSG, ${CHANGES_DETECTED} changes"
            [ "${NEW_STOPS:-0}" -gt 0 ] && COMMIT_MSG="$COMMIT_MSG (+${NEW_STOPS} new)"
            [ "${NAME_CHANGES:-0}" -gt 0 ] && COMMIT_MSG="$COMMIT_MSG (~${NAME_CHANGES} renamed)"
            [ "${REMOVED_STOPS:-0}" -gt 0 ] && COMMIT_MSG="$COMMIT_MSG (-${REMOVED_STOPS} removed)"
          else
            COMMIT_MSG="$COMMIT_MSG, no changes"
          fi

          COMMIT_MSG="$COMMIT_MSG, ${CORRECTIONS:-0} corrections"

          # Commit
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"

          # Push with retry
          git push origin main || {
            git pull --rebase origin main
            git push origin main
          }

      - name: Create Slack notification payload
        run: |
          # Create a safe JSON payload file to avoid shell escaping issues
          cat > slack_payload.json << EOF
          {
            "text": "🚌 Bus Stop Collection Complete",
            "attachments": [
              {
                "color": "$( [ "${CHANGES_DETECTED:-0}" -gt 0 ] && echo "warning" || echo "good" )",
                "title": "Collection Results",
                "fields": [
                  {
                    "title": "Total Stops",
                    "value": "${TOTAL_STOPS:-0}",
                    "short": true
                  },
                  {
                    "title": "Changes Detected",
                    "value": "${CHANGES_DETECTED:-0}",
                    "short": true
                  },
                  {
                    "title": "New Stops",
                    "value": "${NEW_STOPS:-0}",
                    "short": true
                  },
                  {
                    "title": "Name Changes",
                    "value": "${NAME_CHANGES:-0}",
                    "short": true
                  },
                  {
                    "title": "Removed Stops",
                    "value": "${REMOVED_STOPS:-0}",
                    "short": true
                  },
                  {
                    "title": "Corrections Applied",
                    "value": "${CORRECTIONS:-0} (${CORRECTION_PCT:-0}%)",
                    "short": true
                  }
                ],
                "footer": "Bus Stop SG Collection",
                "ts": $(date +%s)
              }
            ]
          }
          EOF

          echo "Slack payload created:"
          cat slack_payload.json

      - name: Send success notification
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            echo "Sending success notification to Slack..."
            curl -X POST \
              -H 'Content-type: application/json' \
              -d @slack_payload.json \
              "$SLACK_WEBHOOK"
            echo "Notification sent!"
          else
            echo "SLACK_WEBHOOK not configured, skipping notification"
          fi

      - name: Send failure notification
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"❌ Bus Stop Collection Failed","color":"danger"}' \
              "$SLACK_WEBHOOK"
          fi

      - name: Summary
        if: always()
        run: |
          echo "================================="
          echo "FIXED WORKFLOW COMPLETE"
          echo "================================="
          echo "Total Stops: ${TOTAL_STOPS:-0}"
          echo "Changes Detected: ${CHANGES_DETECTED:-0}"
          echo "  - New: ${NEW_STOPS:-0}"
          echo "  - Renamed: ${NAME_CHANGES:-0}"
          echo "  - Removed: ${REMOVED_STOPS:-0}"
          echo "Corrections: ${CORRECTIONS:-0} (${CORRECTION_PCT:-0}%)"
          echo "Efficiency: ${EFFICIENCY:-100}%"
          echo "Mode: Fixed with Code Normalization"
          echo "================================="
