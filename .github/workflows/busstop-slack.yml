name: Bus Stop Monitor Comprehensive

on:
  schedule:
    - cron: "0 1 * * 1" # Every Monday at 1 AM UTC
  workflow_dispatch:
    inputs:
      limit:
        description: "Test limit (optional)"
        required: false
        default: ""
      workers:
        description: "Number of workers"
        required: false
        default: "4"
      log_level:
        description: "Log level (INFO, DEBUG)"
        required: false
        default: "INFO"

jobs:
  collect-and-notify:
    runs-on: ubuntu-latest
    timeout-minutes: 180 # Increased timeout for comprehensive processing
    permissions:
      contents: write
    steps:
      - name: Send start notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "channel": "#bus-stop-alerts",
                "username": "Bus Monitor",
                "icon_emoji": ":hourglass_flowing_sand:",
                "text": ":arrows_counterclockwise: Bus Stop Collection Started (Comprehensive Mode)"
              }' \
              "$SLACK_WEBHOOK"
          else
            echo "WARNING: SLACK_WEBHOOK not configured"
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
          pip install selenium beautifulsoup4 pandas tqdm webdriver-manager requests numpy

      - name: Set UTF-8 encoding
        run: |
          echo "Setting UTF-8 encoding for better emoji support..."
          export PYTHONIOENCODING=utf-8
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8

      - name: Run comprehensive data collection
        env:
          LTA_API_KEY: ${{ secrets.LTA_API_KEY }}
          PYTHONIOENCODING: utf-8
        run: |
          echo "Starting comprehensive bus stop data collection..."
          echo "Using script: bus_stop_merger_complete.py"
          echo "Workers: ${{ github.event.inputs.workers || '4' }}"
          echo "Log level: ${{ github.event.inputs.log_level || 'INFO' }}"

          python bus_stop_merger_complete.py \
            --lta-api-key "$LTA_API_KEY" \
            --workers ${{ github.event.inputs.workers || '4' }} \
            --batch-size 20 \
            --log-level ${{ github.event.inputs.log_level || 'INFO' }} \
            ${{ github.event.inputs.limit && format('--limit {0}', github.event.inputs.limit) || '' }}

          echo "Data collection completed!"

      - name: Extract comprehensive statistics
        run: |
          echo "Extracting comprehensive statistics..."
          python -c "
          import pandas as pd
          import os
          import glob

          try:
              # Load main result file
              df = pd.read_csv('data/lta_correction.csv')
              total_stops = len(df)
              corrections = len(df[df['name_source'] == 'SimplyGo']) if 'name_source' in df.columns else 0
              success_rate = 100.0 if total_stops > 0 else 0
              correction_pct = (corrections / total_stops * 100) if total_stops > 0 else 0
              
              # Try to get change statistics
              change_files = glob.glob('data/LTA_changes_*.csv')
              changes_detected = 0
              new_stops = 0
              name_changes = 0
              removed_stops = 0
              
              if change_files:
                  latest_change_file = sorted(change_files)[-1]
                  changes_df = pd.read_csv(latest_change_file)
                  changes_detected = len(changes_df)
                  
                  if 'change_type' in changes_df.columns:
                      new_stops = len(changes_df[changes_df['change_type'] == 'new'])
                      name_changes = len(changes_df[changes_df['change_type'] == 'name_changed'])
                      removed_stops = len(changes_df[changes_df['change_type'] == 'removed'])
              
              print(f'=== COMPREHENSIVE STATISTICS ===')
              print(f'Total Bus Stops: {total_stops:,}')
              print(f'SimplyGo Corrections: {corrections:,}')
              print(f'Correction Rate: {correction_pct:.1f}%')
              print(f'Success Rate: {success_rate:.1f}%')
              print(f'Changes Detected: {changes_detected:,}')
              print(f'New Stops: {new_stops:,}')
              print(f'Name Changes: {name_changes:,}') 
              print(f'Removed Stops: {removed_stops:,}')
              
              # Calculate efficiency
              efficiency = 0
              if changes_detected > 0 and total_stops > 0:
                  efficiency = ((total_stops - changes_detected) / total_stops * 100)
              
              print(f'Processing Efficiency: {efficiency:.1f}%')
              
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write(f'TOTAL_STOPS={total_stops}\n')
                  f.write(f'CORRECTIONS={corrections}\n')
                  f.write(f'SUCCESS_RATE={success_rate}\n')
                  f.write(f'CORRECTION_PCT={correction_pct:.1f}\n')
                  f.write(f'CHANGES_DETECTED={changes_detected}\n')
                  f.write(f'NEW_STOPS={new_stops}\n')
                  f.write(f'NAME_CHANGES={name_changes}\n')
                  f.write(f'REMOVED_STOPS={removed_stops}\n')
                  f.write(f'EFFICIENCY={efficiency:.1f}\n')
              
          except Exception as e:
              print(f'Error extracting stats: {e}')
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write('TOTAL_STOPS=0\n')
                  f.write('CORRECTIONS=0\n')
                  f.write('SUCCESS_RATE=0\n')
                  f.write('CORRECTION_PCT=0\n')
                  f.write('CHANGES_DETECTED=0\n')
                  f.write('NEW_STOPS=0\n')
                  f.write('NAME_CHANGES=0\n')
                  f.write('REMOVED_STOPS=0\n')
                  f.write('EFFICIENCY=0\n')
          "

      - name: Check for significant changes
        run: |
          echo "Checking for significant changes..."

          # Check if this is a significant update
          SIGNIFICANT_CHANGE=false

          if [ "$CHANGES_DETECTED" -gt 50 ]; then
            echo "SIGNIFICANT: Large number of changes detected ($CHANGES_DETECTED)"
            SIGNIFICANT_CHANGE=true
          fi

          if [ "$NEW_STOPS" -gt 20 ]; then
            echo "SIGNIFICANT: Many new bus stops ($NEW_STOPS)"
            SIGNIFICANT_CHANGE=true
          fi

          if [ "$REMOVED_STOPS" -gt 20 ]; then
            echo "SIGNIFICANT: Many removed bus stops ($REMOVED_STOPS)"
            SIGNIFICANT_CHANGE=true
          fi

          echo "SIGNIFICANT_CHANGE=$SIGNIFICANT_CHANGE" >> $GITHUB_ENV

      - name: Commit results
        run: |
          echo "Committing results to repository..."
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          TIMESTAMP=$(date +'%d%m%Y_%H%M')

          # Add files if they exist
          [ -f "data/lta_correction.csv" ] && git add "data/lta_correction.csv"

          # Add other data files
          for file in data/*.csv logs/*.log output/*.csv; do
            [ -f "$file" ] && git add "$file"
          done

          # Create comprehensive commit message
          COMMIT_MSG="Bus data update ${TIMESTAMP}: ${TOTAL_STOPS:-0} stops"

          if [ "$CHANGES_DETECTED" -gt 0 ]; then
            COMMIT_MSG="$COMMIT_MSG, ${CHANGES_DETECTED} changes detected"
            [ "$NEW_STOPS" -gt 0 ] && COMMIT_MSG="$COMMIT_MSG (+${NEW_STOPS} new)"
            [ "$NAME_CHANGES" -gt 0 ] && COMMIT_MSG="$COMMIT_MSG (~${NAME_CHANGES} renamed)"
            [ "$REMOVED_STOPS" -gt 0 ] && COMMIT_MSG="$COMMIT_MSG (-${REMOVED_STOPS} removed)"
          else
            COMMIT_MSG="$COMMIT_MSG, no changes"
          fi

          COMMIT_MSG="$COMMIT_MSG, ${CORRECTIONS:-0} corrections (${CORRECTION_PCT:-0}%)"

          # Commit
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"

          # Push
          git push origin main || {
            git pull --rebase origin main
            git push origin main
          }

      - name: Send success notification
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            # Determine status color and message
            if [ "$CHANGES_DETECTED" -gt 0 ]; then
              COLOR="warning"
              STATUS_EMOJI=":warning:"
              STATUS_TEXT="Changes Detected"
            else
              COLOR="good"
              STATUS_EMOJI=":white_check_mark:"
              STATUS_TEXT="No Changes"
            fi
            
            # Create efficiency message
            EFFICIENCY_MSG=""
            if [ "$CHANGES_DETECTED" -gt 0 ]; then
              EFFICIENCY_MSG="Processed only ${CHANGES_DETECTED} changes instead of all ${TOTAL_STOPS} stops (${EFFICIENCY}% efficiency)"
            else
              EFFICIENCY_MSG="No processing needed - data unchanged"
            fi
            
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "channel": "#bus-stop-alerts",
                "username": "Bus Monitor",
                "icon_emoji": "'$STATUS_EMOJI'",
                "text": "'$STATUS_EMOJI' Bus Stop Collection Complete - '$STATUS_TEXT'",
                "attachments": [{
                  "color": "'$COLOR'",
                  "title": "Comprehensive Collection Results",
                  "fields": [
                    {
                      "title": "Total Stops",
                      "value": "'${TOTAL_STOPS:-0}'",
                      "short": true
                    },
                    {
                      "title": "Changes Detected",
                      "value": "'${CHANGES_DETECTED:-0}'",
                      "short": true
                    },
                    {
                      "title": "New Stops",
                      "value": "'${NEW_STOPS:-0}'",
                      "short": true
                    },
                    {
                      "title": "Name Changes",
                      "value": "'${NAME_CHANGES:-0}'",
                      "short": true
                    },
                    {
                      "title": "Removed Stops", 
                      "value": "'${REMOVED_STOPS:-0}'",
                      "short": true
                    },
                    {
                      "title": "Corrections Applied",
                      "value": "'${CORRECTIONS:-0}' ('${CORRECTION_PCT:-0}'%)",
                      "short": true
                    }
                  ],
                  "text": "'$EFFICIENCY_MSG'",
                  "footer": "Comprehensive Bus Monitor",
                  "ts": '$(date +%s)'
                }]
              }' \
              "$SLACK_WEBHOOK"
          fi

      - name: Send failure notification
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "channel": "#bus-stop-alerts",
                "username": "Bus Monitor",
                "icon_emoji": ":x:",
                "text": ":x: Bus Stop Collection Failed",
                "attachments": [{
                  "color": "danger",
                  "title": "Comprehensive Workflow Failed",
                  "text": "Check logs for details. The comprehensive comparison may have encountered an error.",
                  "footer": "Comprehensive Bus Monitor",
                  "ts": '$(date +%s)'
                }]
              }' \
              "$SLACK_WEBHOOK"
          fi

      - name: Summary
        if: always()
        run: |
          echo "================================="
          echo "COMPREHENSIVE WORKFLOW COMPLETE"
          echo "================================="
          echo "Total Stops: ${TOTAL_STOPS:-0}"
          echo "Changes Detected: ${CHANGES_DETECTED:-0}"
          echo "  - New: ${NEW_STOPS:-0}"
          echo "  - Renamed: ${NAME_CHANGES:-0}"
          echo "  - Removed: ${REMOVED_STOPS:-0}"
          echo "Corrections: ${CORRECTIONS:-0} (${CORRECTION_PCT:-0}%)"
          echo "Efficiency: ${EFFICIENCY:-0}%"
          echo "Mode: Comprehensive Detection"
          echo "================================="
